// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  username      String   @unique
  fullName      String
  email         String   @unique
  password      String
  phone         String?
  birthdate     DateTime?
  address       String?
  gender        String?
  identityNumber String?
  avatar        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  reports         Report[]
  projectsOwned   Project[] @relation("ProjectOwner")
  projectsCollab  Project[] @relation("ProjectCollaborator")
  notifications   Notification[]
  syncProjects    SyncProject[]
}

model Report {
  id          Int      @id @default(autoincrement())
  userId      Int
  type        String
  title       String
  description String?
  metrics     String   // JSON string
  iaResults   String   // JSON string
  dateRange   String   // JSON string
  createdAt   DateTime @default(now())
  fileUrl     String?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  pattern     String   @default("monolith")
  status      String   @default("active")
  ownerId     Int
  collaborators String // JSON string
  components  String   // JSON string
  lastSync    DateTime @default(now())
  iaInsights  String   // JSON string
  tags        String   // Comma-separated tags due to SQLite limitation
  license     String?  // MIT, Apache, GPL, BSD, etc.
  visibility  String   @default("public") // public, private
  addReadme   Boolean  @default(true)
  addGitignore Boolean @default(true)
  chooseLicense Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner       User     @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  collaborators_users User[] @relation("ProjectCollaborator")
}

model SyncProject {
  id                 Int      @id @default(autoincrement())
  name               String
  description        String
  type               String   // 'bff' or 'sidecar'
  pattern            String?  // For BFF projects
  tags               String?  // Comma-separated tags
  frontendAssociation String? // Associated frontends
  contact            String?  // Contact information
  functions          String?  // JSON string for Sidecar functions
  status             String   @default("active") // 'active' or 'inactive'
  lastSync           DateTime @default(now())
  userId             Int
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  message   String
  type      String   @default("info") // info, warning, error, success
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
} 
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  username      String   @unique
  fullName      String
  email         String   @unique
  password      String
  phone         String?
  birthdate     DateTime?
  address       String?
  gender        String?
  identityNumber String?
  avatar        String?
  role          String   @default("user") // "admin" | "user"
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  reports         Report[]
  projectsOwned   Project[] @relation("ProjectOwner")
  notifications   Notification[]
  syncProjects    SyncProject[]
  syncHistory     SyncHistory[]
  collaborations  ProjectCollaborator[]
  aiChatHistory   AIChatMessage[]
  userProgress    UserTrainingProgress[]
  certificates    TrainingCertificate[]
  aiAnalyses      AIAnalysis[]
}

model Report {
  id          Int      @id @default(autoincrement())
  userId      Int
  type        String
  title       String
  description String?
  metrics     String   // JSON string
  iaResults   String   // JSON string
  dateRange   String   // JSON string
  createdAt   DateTime @default(now())
  fileUrl     String?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  pattern     String   @default("monolith")
  status      String   @default("active")
  ownerId     Int
  language    String   @default("javascript") // javascript, typescript, python, etc.
  components  String   // JSON string
  lastSync    DateTime @default(now())
  iaInsights  String   // JSON string
  tags        String   // Comma-separated tags due to SQLite limitation
  license     String?  // MIT, Apache, GPL, BSD, etc.
  visibility  String   @default("public") // public, private
  addReadme   Boolean  @default(true)
  addGitignore Boolean @default(true)
  chooseLicense Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner         User                @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  collaborators ProjectCollaborator[]
  aiChatHistory AIChatMessage[]
  aiAnalyses    AIAnalysis[]
  versions      Version[]
}

model SyncProject {
  id                 Int      @id @default(autoincrement())
  name               String
  description        String
  type               String   // 'bff' or 'sidecar'
  pattern            String?  // For BFF projects
  tags               String?  // Comma-separated tags
  frontendAssociation String? // Associated frontends
  contact            String?  // Contact information
  functions          String?  // JSON string for Sidecar functions
  status             String   @default("active") // 'active' or 'inactive'
  lastSync           DateTime @default(now())
  userId             Int
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  syncHistory SyncHistory[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  message   String
  type      String   @default("info") // info, warning, error, success
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SyncHistory {
  id        Int      @id @default(autoincrement())
  project   SyncProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  date      DateTime @default(now())
  status    String   // success, error
  message   String?
}

model ProjectCollaborator {
  id        Int     @id @default(autoincrement())
  project   Project @relation(fields: [projectId], references: [id])
  projectId Int
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  role      String  @default("Usuario")
  @@unique([projectId, userId])
}

model AIChatMessage {
  id        Int      @id @default(autoincrement())
  projectId Int
  userId    Int
  message   String   // User message or AI response
  isAI      Boolean  @default(false) // true if AI response, false if user message
  timestamp DateTime @default(now())
  
  // Relations
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TrainingResource {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  content     String   // JSON string for rich content
  type        String   // "module", "tutorial", "documentation"
  category    String   // "react", "css", "testing", "performance", "accessibility", "i18n"
  difficulty  String   @default("beginner") // "beginner", "intermediate", "advanced"
  duration    Int?     // Estimated time in minutes
  imageUrl    String?
  codeSnippet String?  // JSON string for code examples
  order       Int      @default(0) // For ordering modules
  isActive    Boolean  @default(true)
  fileUrl     String?  // URL for downloadable PDF
  videoUrl    String?  // URL for video content
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userProgress UserTrainingProgress[]
  certificates TrainingCertificate[]
}

model UserTrainingProgress {
  id        Int      @id @default(autoincrement())
  userId    Int
  resourceId Int
  progress  Int      @default(0) // Percentage completed (0-100)
  timeSpent Int      @default(0) // Time spent in minutes
  completed Boolean  @default(false)
  startedAt DateTime @default(now())
  completedAt DateTime?
  
  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resource TrainingResource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  
  @@unique([userId, resourceId])
}

model TrainingCertificate {
  id        Int      @id @default(autoincrement())
  userId    Int
  resourceId Int
  certificateUrl String? // URL to generated PDF certificate
  issuedAt  DateTime @default(now())
  expiresAt DateTime?
  
  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resource TrainingResource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  
  @@unique([userId, resourceId])
} 

model AIConfig {
  id                    Int      @id @default(autoincrement())
  analysisInterval      Int      @default(30) // en minutos
  confidenceThreshold   Int      @default(75) // 0-100
  maxRecommendations    Int      @default(10)
  autoAnalysis          Boolean  @default(true)
  performanceAnalysis   Boolean  @default(true)
  securityAnalysis      Boolean  @default(true)
  codeQualityAnalysis   Boolean  @default(true)
  accessibilityAnalysis Boolean  @default(true)
  patternDetection      Boolean  @default(true)
  aiModel               String   @default("gpt-4")
  maxTokens             Int      @default(4000)
  temperature           Float    @default(0.7)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model AIAnalysis {
  id              Int      @id @default(autoincrement())
  projectId       Int?
  userId          Int?
  analysisType    String   // "performance", "security", "quality", etc.
  confidence      Float    // 0-100
  recommendations String   // JSON string
  status          String   @default("completed") // "pending", "processing", "completed", "failed"
  createdAt       DateTime @default(now())
  
  // Relations
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AIModel {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Version {
  id          Int      @id @default(autoincrement())
  hash        String   @unique // Git commit hash
  message     String   // Commit message
  author      String   // Author name
  branch      String   // Branch name
  status      String   @default("pending") // "deployed", "testing", "conflict", "pending"
  filesChanged String  // JSON array of changed files
  projectId   Int
  createdAt   DateTime @default(now())
  
  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
} 